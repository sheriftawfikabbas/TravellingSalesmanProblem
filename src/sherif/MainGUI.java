/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * MainGUI.java
 *
 * Created on May 4, 2011, 4:41:49 PM
 */
package sherif;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

import jxl.write.DateTime;

import org.jgap.IChromosome;
import org.jgap.audit.EvolutionMonitor;

import sherif.io.WriteCities;

/**
 *
 * @author kadersh
 */
public class MainGUI extends javax.swing.JFrame {

    TravellingSalesmanGUI t;
    TSPData theTSPData;
    Dimension size;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        theTSPData = new TSPData();
        initComponents();
        size = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(0, 0);
        setSize(size.width / 2, (int)(size.height*0.8));
    }

    public MainGUI(TSPData theTSPData) {
        this.theTSPData = theTSPData;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new TSPPane(theTSPData);
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setName("TSP Panel");
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 677, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        jButton1.setText("Run");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Stop");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)))
        );

        jButton2.getAccessibleContext().setAccessibleName("Stop");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseReleased(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jPanel1MouseReleased
    }// GEN-LAST:event_jPanel1MouseReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed

        Thread thread = new Thread() {

            public void run() {
                System.out.println("Thread Running");
                jPanel1.removeMouseListener(null);

                try {
                    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
                    Date date = new Date();
                    String filename = dateFormat.format(date) + "_cities=" + theTSPData.counter;
                    WriteCities.writeCities(filename, theTSPData.coordinateArray, theTSPData.counter);
                    int[] indices;
                    int[] elements = new int[theTSPData.counter];
                    for (int i = 0; i < theTSPData.counter; i++) {
                        elements[i] = i + 1;
                    }
                    PermutationGenerator x = new PermutationGenerator(
                            theTSPData.counter);
                    int[] permutation;
                    int[] optimalPath = new int[theTSPData.counter];
                    double optimalPathLength = 0;
                    while (x.hasMore()) {
                        permutation = new int[theTSPData.counter];
                        indices = x.getNext();
                        for (int i = 0; i < indices.length; i++) {
                            permutation[i] = elements[indices[i]];
                        }
                        double currentPathLength = pathLength(permutation);
                        if (optimalPathLength < currentPathLength) {
                            optimalPathLength = currentPathLength;
                            optimalPath = Arrays.copyOf(permutation,
                                    theTSPData.counter);
                        }
                    }
                    System.out.println("-----The optimal path is:");
                    for (int i = 0; i < theTSPData.counter; i++) {
                        System.out.println(optimalPath[i]);
                    }
                    WriteCities.writeOptimalPath(filename + ".opt", optimalPath);
                    System.exit(0);

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        };

        thread.start();
    }

    public double distance(int a, int b) {
        double x1 = theTSPData.coordinateArray[a][0];
        double y1 = theTSPData.coordinateArray[a][1];
        double x2 = theTSPData.coordinateArray[b][0];
        double y2 = theTSPData.coordinateArray[b][1];

        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    }

    public double pathLength(int[] perm) {
        double totalLength = 0;
        for (int i = 1; i < theTSPData.counter; i++) {
            totalLength += distance(perm[i], perm[i - 1]);
        }
        return totalLength;
    }
    
    Thread thread;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed

        thread = new Thread() {

            public void run() {
                System.out.println("Thread Running");
                jPanel1.removeMouseListener(null);
                try {
                    t = new TravellingSalesmanGUI(theTSPData.coordinateArray,
                            theTSPData.counter);
                    t.setMaxEvolution(2000);
                    t.setPopulationSize(7000);

                    TSPIndicatorsGUI tspInd = new TSPIndicatorsGUI();
                    tspInd.setSize(size.width / 2, (int)(size.height*0.8));
                    tspInd.setLocation(size.width / 2, 0);

                    tspInd.setVisible(true);
                    EvolutionMonitor em = new EvolutionMonitor();
                    em.start(t.getConfiguration());
                    IChromosome optimal = t.findOptimalPath(null,
                            tspInd.getChart(), (TSPPane) jPanel1);
                    System.out.println("Solution: ");
                    for (int i = 0; i < theTSPData.counter; i++) {
                        System.out.println(optimal.getGenes()[i]);
                    }
                    System.out.println("Score "
                            + (Integer.MAX_VALUE / 2 - optimal
                                    .getFitnessValue())); // TODO add your
                    // handling code
                    // here:

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        };

        thread.start();

    }// GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
        try {
            if(thread!=null){
                thread.stop();
            }
            theTSPData = new TSPData();
            jPanel1.repaint();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }// GEN-LAST:event_jButton2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    public static void main(String[] args) {
        MainGUI c = new MainGUI();
        c.setVisible(true);
//        c.setSize(800, 500);
    }

    public TSPPane getTSPPane() {
        return (TSPPane) jPanel1;
    }
}
